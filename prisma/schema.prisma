// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============
// ENUMS
// ==============

// Enum untuk role user (Admin atau Customer)
enum Role {
  CUSTOMER
  ADMIN
}

// Enum untuk status pesanan
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}


// ==============
// MODELS
// ==============

// --- MODEL UNTUK USER ---
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  address   String?
  role      Role     @default(CUSTOMER)

  // Relasi
  cart      Cart?    // Setiap user punya satu keranjang (one-to-one)
  orders    Order[]  // Setiap user bisa punya banyak pesanan (one-to-many)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- MODEL UNTUK PRODUK ---
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text // Tipe data Text untuk deskripsi yang panjang
  price       Decimal  @db.Decimal(12, 2) // Tipe data Decimal lebih aman untuk uang
  stock       Int      @default(0)
  imageUrl    String?

  // Relasi
  cartItems   CartItem[]  // Produk ini bisa ada di banyak keranjang
  orderItems  OrderItem[] // Produk ini bisa ada di banyak pesanan

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// --- MODEL UNTUK KERANJANG BELANJA ---
model Cart {
  id     Int @id @default(autoincrement())
  userId Int @unique // @unique memastikan relasi one-to-one dengan User

  // Relasi
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[] // Keranjang ini bisa berisi banyak item

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- MODEL PENGHUBUNG: CART & PRODUCT (MANY-TO-MANY) ---
// Tabel ini untuk menyimpan produk apa saja yang ada di dalam sebuah keranjang
model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int

  // Relasi
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade) // Jika cart dihapus, itemnya ikut terhapus
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Constraint agar produk yang sama tidak duplikat dalam satu keranjang
  @@unique([cartId, productId])
}

// --- MODEL UNTUK PESANAN (ORDER) ---
model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  totalAmount     Decimal     @db.Decimal(12, 2)
  status          OrderStatus @default(PENDING)
  shippingAddress String

  // Relasi
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[] // Pesanan ini terdiri dari banyak item

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// --- MODEL PENGHUBUNG: ORDER & PRODUCT (MANY-TO-MANY) ---
// Tabel ini untuk menyimpan produk apa saja yang dibeli dalam sebuah pesanan
model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(12, 2) // Menyimpan harga produk PADA SAAT dibeli

  // Relasi
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}