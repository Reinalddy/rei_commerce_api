// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============
// MODELS
// ==============

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER) // admin, user
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orders    Order[]
  products  Product[]
  cart      Cart?

  @@map("users")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  price       Float      @default(0)
  stock       Int
  imageUrl    String?
  ownerId     Int
  owner       User     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])

  orderItems  OrderItem[]
  cartItems   CartItem[]

  @@map("products")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  @@map("categories")
}

model Cart {
  id      Int        @id @default(autoincrement())
  userId  Int        @unique
  user    User       @relation(fields: [userId], references: [id])
  items   CartItem[]

  @@map("carts")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  totalAmount Decimal      @db.Decimal(10,2)
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  items       OrderItem[]
  payment     Payment?
  shipment    Shipment?

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal  @db.Decimal(10,2)

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id        Int        @id @default(autoincrement())
  orderId   Int        @unique
  method    String
  status    PaymentStatus @default(PENDING)
  paidAt    DateTime?

  order     Order      @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Shipment {
  id          Int       @id @default(autoincrement())
  orderId     Int       @unique
  address     String
  city        String
  postalCode  String
  status      ShipmentStatus @default(PROCESSING)

  order       Order     @relation(fields: [orderId], references: [id])

  @@map("shipments")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ShipmentStatus {
  PROCESSING
  SHIPPED
  DELIVERED
}